/***************************************************************************************
 * Code for Bike Sharing Application
 * Authors: Himanshu Mendhe, Pranay Shashank Adavi, Aradhya Mehta 
 * Description: This code includes autogenerated code from Eclipse's WindowBuilder Tool
 * This code imports MLP and NB model generated in mlp.java and nb.java and classifies
 * the input given by user
 * 
 */

import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JTextField;
import javax.swing.JComboBox;

import java.awt.Color;

import javax.swing.DefaultComboBoxModel;
import javax.swing.JButton;
import javax.swing.JLabel;

import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.util.ArrayList;
import java.util.Arrays;

import javax.swing.SwingConstants;

import weka.classifiers.bayes.NaiveBayes;
import weka.classifiers.functions.MultilayerPerceptron;
import weka.core.*;
import weka.core.converters.ArffSaver;
import weka.core.converters.CSVLoader;
import weka.filters.Filter;
import weka.filters.unsupervised.attribute.Discretize;

public class BikeSharingApplication {

	private JFrame frmBikeSharingDemand;
	private JTextField textField_temp;
	private JTextField textField_humidity;
	private JTextField textField_windspeed;
	public static String MLPResult;
	public static String NBResult;
	private ArrayList<Float> maxValues = new ArrayList<Float>();

	/***************************************************************
	 * Function to importing model and classifying that input
	 */
	public void computeCount() {
		ObjectInputStream ipObject1, ipObject2, ipObject3;
		MultilayerPerceptron nn = null;
		NaiveBayes nb = null;
		Discretize filter = null;

		try {
			ipObject1 = new ObjectInputStream(new FileInputStream("mlp.model"));
			ipObject2 = new ObjectInputStream(new FileInputStream("nb.model"));
			ipObject3 = new ObjectInputStream(new FileInputStream("Filter"));
			nn = (MultilayerPerceptron) ipObject1.readObject();
			ipObject1.close();
			nb = (NaiveBayes) ipObject2.readObject();
			ipObject2.close();
			filter = (Discretize) ipObject3.readObject();
			ipObject3.close();

		} catch (FileNotFoundException e1) {
			e1.printStackTrace();
		} catch (IOException e1) {
			e1.printStackTrace();
		} catch (ClassNotFoundException e1) {
			e1.printStackTrace();
		}

		String trainArffFile = "instanceFileMLP.arff";
		String testArffFile = "test.arff";
		BufferedReader reader, reader1;
		Instances testInst = null;
		Instances testIns = null;
		double res;
		try {
			reader = new BufferedReader(new FileReader(trainArffFile));
			testInst = new Instances(reader);
			reader1 = new BufferedReader(new FileReader(testArffFile));
			testIns = new Instances(reader1);
			reader1.close();
			Instances op = new Instances(testIns);
			op.setClassIndex(op.numAttributes() - 1);
			res = nn.classifyInstance(testInst.firstInstance());
			double res1 = (res < 0) ? 0 : res;
			op.instance(0).setClassValue(res1);
			System.out.println("MLP: " + op.firstInstance().toString());
			String[] MLPopResArr = op.firstInstance().toString().split(",");
			Double abs = (maxValues.get(8) * Double.parseDouble(MLPopResArr[8]))/100;
			Integer temp1 = (int) Math.ceil(abs);
			MLPResult = temp1.toString();
		} catch (Exception e1) {
			e1.printStackTrace();
		}

		String singleNBArffFile = "instanceFileNB.arff";
		String testNBArffFile = "testNB.arff";
		Instances testNBInst = null;
		Instances testNBIns = null;
		// Instance filteredtestNBInst = null;
		Instances filteredOpNB = null;
		double resNB;
		try {
			reader = new BufferedReader(new FileReader(singleNBArffFile));
			testNBInst = new Instances(reader);
			testNBInst.setClassIndex(testNBInst.numAttributes() - 2);
			filteredOpNB = Filter.useFilter(testNBInst, filter);
			// filter.input(testNBInst.firstInstance());
			filteredOpNB.setClassIndex(filteredOpNB.numAttributes() - 1);
			// filteredtestNBInst = filter.output();
			// System.out.println("Filtered: " + filteredtestNBInst.toString());
			reader1 = new BufferedReader(new FileReader(testNBArffFile));
			testNBIns = new Instances(reader1);
			reader1.close();
			Instances op1 = new Instances(testNBIns);
			op1.setClassIndex(op1.numAttributes() - 1);
			// resNB = nb.classifyInstance(filteredtestNBInst);
			resNB = nb.classifyInstance(filteredOpNB.firstInstance());
			op1.instance(0).setClassValue(resNB);
			System.out.println("NB: " + op1.firstInstance().toString());
			String[] NBopResArr = op1.firstInstance().toString().split(",");
			Integer temp = (int) Math.ceil(Double.parseDouble(NBopResArr[8]));
			NBResult = temp.toString();
		} catch (Exception e1) {
			e1.printStackTrace();
		}

	}

	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					BikeSharingApplication window = new BikeSharingApplication();
					window.frmBikeSharingDemand.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the application.
	 */
	public BikeSharingApplication() {
		initialize();
	}

	/**
	 * Initialize the contents of the frame.
	 */
	private void initialize() {
		frmBikeSharingDemand = new JFrame();
		frmBikeSharingDemand.setBackground(Color.WHITE);
		frmBikeSharingDemand.setFont(new Font("Comic Sans MS", Font.PLAIN, 12));
		frmBikeSharingDemand.setForeground(Color.ORANGE);
		frmBikeSharingDemand.setTitle("BIKE SHARING DEMAND");
		frmBikeSharingDemand.getContentPane().setBackground(Color.GRAY);
		frmBikeSharingDemand.setBounds(100, 100, 450, 300);
		frmBikeSharingDemand.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frmBikeSharingDemand.getContentPane().setLayout(null);

		final JComboBox<Object> comboBox_time = new JComboBox<Object>();
		comboBox_time.setModel(new DefaultComboBoxModel<Object>(new String[] {
				"00:00 - 01:00", "01:00 - 02:00", "02:00 - 03:00",
				"03:00 - 04:00", "04:00 - 05:00", "05:00 - 06:00",
				"06:00 - 07:00", "07:00 - 08:00", "08:00 - 09:00",
				"09:00 - 10:00", "10:00 - 11:00", "11:00 - 12:00",
				"12:00 - 13:00", "13;00 - 14:00", "14:00 - 15:00",
				"15:00 - 16:00", "16:00 - 17:00", "17:00 - 18:00",
				"18:00 - 19:00", "19:00 - 20:00", "20:00 - 21:00",
				"21:00 - 22:00", "22:00 - 23:00", "23:00 - 00:00" }));
		comboBox_time.setToolTipText("qw");
		comboBox_time.setBounds(167, 229, 112, 20);
		frmBikeSharingDemand.getContentPane().add(comboBox_time);

		final JComboBox<Object> comboBox_season = new JComboBox<Object>();
		comboBox_season.setModel(new DefaultComboBoxModel<Object>(new String[] {
				"1", "2", "3", "4" }));
		comboBox_season.setBounds(220, 11, 59, 20);
		// comboBox_season.getS
		frmBikeSharingDemand.getContentPane().add(comboBox_season);

		final JComboBox<Object> comboBox_workingday = new JComboBox<Object>();
		comboBox_workingday.setModel(new DefaultComboBoxModel<Object>(
				new String[] { "False", "True" }));
		comboBox_workingday.setBounds(220, 42, 59, 20);
		frmBikeSharingDemand.getContentPane().add(comboBox_workingday);

		final JComboBox<Object> comboBox_weather = new JComboBox<Object>();
		comboBox_weather.setModel(new DefaultComboBoxModel<Object>(
				new String[] { "1", "2", "3", "4" }));
		comboBox_weather.setBounds(220, 166, 59, 20);
		frmBikeSharingDemand.getContentPane().add(comboBox_weather);

		final JComboBox<Object> comboBox_holiday = new JComboBox<Object>();
		comboBox_holiday.setModel(new DefaultComboBoxModel<Object>(
				new String[] { "True", "False" }));
		comboBox_holiday.setBounds(220, 135, 59, 20);
		frmBikeSharingDemand.getContentPane().add(comboBox_holiday);

		textField_temp = new JTextField();
		textField_temp.setText("9.84");
		textField_temp.setBounds(220, 73, 59, 20);
		frmBikeSharingDemand.getContentPane().add(textField_temp);
		textField_temp.setColumns(10);

		textField_humidity = new JTextField();
		textField_humidity.setText("11.365");
		textField_humidity.setBounds(220, 104, 59, 20);
		frmBikeSharingDemand.getContentPane().add(textField_humidity);
		textField_humidity.setColumns(10);

		textField_windspeed = new JTextField();
		textField_windspeed.setText("52");
		textField_windspeed.setBounds(220, 197, 59, 20);
		frmBikeSharingDemand.getContentPane().add(textField_windspeed);
		textField_windspeed.setColumns(10);

		JLabel lblSeason = new JLabel("Season:");
		lblSeason.setForeground(Color.ORANGE);
		lblSeason.setFont(new Font("Comic Sans MS", Font.PLAIN, 12));
		lblSeason.setHorizontalAlignment(SwingConstants.RIGHT);
		lblSeason.setBounds(112, 11, 98, 20);
		frmBikeSharingDemand.getContentPane().add(lblSeason);

		JLabel lblWorkingday = new JLabel("WorkingDay:");
		lblWorkingday.setForeground(Color.ORANGE);
		lblWorkingday.setFont(new Font("Comic Sans MS", Font.PLAIN, 12));
		lblWorkingday.setHorizontalAlignment(SwingConstants.RIGHT);
		lblWorkingday.setBounds(122, 42, 88, 20);
		frmBikeSharingDemand.getContentPane().add(lblWorkingday);

		JLabel lblTemp = new JLabel("temp:");
		lblTemp.setFont(new Font("Comic Sans MS", Font.PLAIN, 12));
		lblTemp.setForeground(Color.ORANGE);
		lblTemp.setHorizontalAlignment(SwingConstants.RIGHT);
		lblTemp.setBounds(148, 73, 62, 20);
		frmBikeSharingDemand.getContentPane().add(lblTemp);

		JLabel lblHumidity = new JLabel("humidity:");
		lblHumidity.setForeground(Color.ORANGE);
		lblHumidity.setFont(new Font("Comic Sans MS", Font.PLAIN, 12));
		lblHumidity.setHorizontalAlignment(SwingConstants.RIGHT);
		lblHumidity.setBounds(135, 104, 75, 20);
		frmBikeSharingDemand.getContentPane().add(lblHumidity);

		JLabel lblHoliday = new JLabel("holiday:");
		lblHoliday.setForeground(Color.ORANGE);
		lblHoliday.setFont(new Font("Comic Sans MS", Font.PLAIN, 12));
		lblHoliday.setHorizontalAlignment(SwingConstants.RIGHT);
		lblHoliday.setBounds(148, 135, 62, 20);
		frmBikeSharingDemand.getContentPane().add(lblHoliday);

		JLabel lblWeather = new JLabel("weather:");
		lblWeather.setFont(new Font("Comic Sans MS", Font.PLAIN, 12));
		lblWeather.setForeground(Color.ORANGE);
		lblWeather.setHorizontalAlignment(SwingConstants.RIGHT);
		lblWeather.setBounds(148, 166, 62, 20);
		frmBikeSharingDemand.getContentPane().add(lblWeather);

		JLabel lblNewLabel = new JLabel("windspeed:");
		lblNewLabel.setForeground(Color.ORANGE);
		lblNewLabel.setFont(new Font("Comic Sans MS", Font.PLAIN, 12));
		lblNewLabel.setHorizontalAlignment(SwingConstants.RIGHT);
		lblNewLabel.setBounds(135, 197, 75, 20);
		frmBikeSharingDemand.getContentPane().add(lblNewLabel);

		JLabel lblTime = new JLabel("Time:");
		lblTime.setForeground(Color.ORANGE);
		lblTime.setFont(new Font("Comic Sans MS", Font.PLAIN, 12));
		lblTime.setHorizontalAlignment(SwingConstants.RIGHT);
		lblTime.setBounds(85, 229, 72, 20);
		frmBikeSharingDemand.getContentPane().add(lblTime);

		JButton btnSubmit = new JButton("Submit");
		btnSubmit.setFont(new Font("Comic Sans MS", Font.PLAIN, 12));
		btnSubmit.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				Object comboSeason = comboBox_season.getSelectedItem();
				Object comboWeather = comboBox_weather.getSelectedItem();
				String textTemp = textField_temp.getText();
				String textHumidity = textField_humidity.getText();
				String textWindspeed = textField_windspeed.getText();
				Object comboHoliday = comboBox_holiday.getSelectedItem();
				Object comboTime = comboBox_time.getSelectedItem();
				Object comboWorkDay = comboBox_workingday.getSelectedItem();
				insert2File(comboSeason, comboWeather, textTemp, textHumidity,
						textWindspeed, comboHoliday, comboTime, comboWorkDay);
				cleanData();
				computeCount();
				try {
					FileWriter fw = new FileWriter("resultForFrame.txt");
					String writeFile = MLPResult + "\n" + NBResult;
					System.out.println(writeFile);
					fw.write(writeFile);
					/*
					 * System.out.println("NBResult: " + NBResult);
					 * fw.write(NBResult);
					 */
					fw.close();
				} catch (IOException e) {
					e.printStackTrace();
				}

				Results r1 = new Results();
				r1.setVisible(true);

			}
		});

		btnSubmit.setBounds(334, 227, 76, 23);
		frmBikeSharingDemand.getContentPane().add(btnSubmit);

	}

	public static void convertCSV2Arff(String ipFilename, String opFilename) {
		CSVLoader csvLoader = new CSVLoader();
		Instances data;
		ArffSaver saver = new ArffSaver();

		try {
			csvLoader.setSource(new File(ipFilename));
			data = csvLoader.getDataSet();
			saver.setInstances(data);
			saver.setFile(new File(opFilename));
			saver.writeBatch();
		} catch (IOException e) {
			e.printStackTrace();
			e.printStackTrace();
		}
	}

	@SuppressWarnings("unchecked")
	protected void cleanData() {
		ObjectInputStream ipObject;
		try {
			ipObject = new ObjectInputStream(new FileInputStream("maxValues"));
			maxValues = (ArrayList<Float>) ipObject.readObject();
			ipObject.close();
			BufferedReader csvFile = new BufferedReader(new FileReader(
					"guiOP.csv"));
			String line = csvFile.readLine();
			csvFile.close();
			String[] values = line.split(",");
			int temp = values.length;
			String[] finalValues = new String[temp];
			for (int i = 0; i < values.length; i++) {
				System.out.println("Values: " + values[i] + "MaxValues: "
						+ maxValues.get(i));
				Float x = (Float.parseFloat(values[i]) / maxValues.get(i)) * 100;
				finalValues[i] = x.toString();
			}
			String valuesString = Arrays.toString(finalValues);
			String valuesStringFinal = valuesString.replace("[", "").replace(
					"]", "");
			String names = "season,workingday,weather,temp,humidity,windspeed,holiday,time,count\n";
			FileWriter cvsWriter1 = new FileWriter("guiOPMLP.csv");
			cvsWriter1.append(names);
			cvsWriter1.append(valuesStringFinal);
			cvsWriter1.close();
			FileWriter cvsWriter2 = new FileWriter("guiOPNB.csv");
			cvsWriter2.append(names);
			cvsWriter2.append(line);
			cvsWriter2.close();

			convertCSV2Arff("guiOPMLP.csv", "instanceFileMLP.arff");
			convertCSV2Arff("guiOPNB.csv", "instanceFileNB.arff");
		} catch (IOException | ClassNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}

	public void insert2File(Object comboSeason, Object comboWeather,
			String textTemp, String textHumidity, String textWindspeed,
			Object comboHoliday, Object comboTime, Object comboWorkDay) {
		FileWriter cvsWriter1;
		try {
			cvsWriter1 = new FileWriter("guiOP.csv");
			String workingday, weather, holiday, time = null;

			workingday = comboWorkDay.toString().equals("TRUE") ? "1" : "0";
			weather = comboWeather.toString();
			holiday = comboHoliday.toString().equals("TRUE") ? "1" : "0";

			if (comboTime.toString().equals("00:00 - 01:00")) {
				time = "1";
			} else if (comboTime.toString().equals("01:00 - 02:00")) {
				time = "2";
			} else if (comboTime.toString().equals("02:00 - 03:00")) {
				time = "3";
			} else if (comboTime.toString().equals("03:00 - 04:00")) {
				time = "4";
			} else if (comboTime.toString().equals("04:00 - 05:00")) {
				time = "5";
			} else if (comboTime.toString().equals("05:00 - 06:00")) {
				time = "6";
			} else if (comboTime.toString().equals("06:00 - 07:00")) {
				time = "7";
			} else if (comboTime.toString().equals("07:00 - 08:00")) {
				time = "8";
			} else if (comboTime.toString().equals("08:00 - 09:00")) {
				time = "9";
			} else if (comboTime.toString().equals("09:00 - 10:00")) {
				time = "10";
			} else if (comboTime.toString().equals("10:00 - 11:00")) {
				time = "11";
			} else if (comboTime.toString().equals("11:00 - 12:00")) {
				time = "12";
			} else if (comboTime.toString().equals("12:00 - 13:00")) {
				time = "13";
			} else if (comboTime.toString().equals("13:00 - 14:00")) {
				time = "14";
			} else if (comboTime.toString().equals("14:00 - 15:00")) {
				time = "15";
			} else if (comboTime.toString().equals("15:00 - 16:00")) {
				time = "16";
			} else if (comboTime.toString().equals("16:00 - 17:00")) {
				time = "17";
			} else if (comboTime.toString().equals("17:00 - 18:00")) {
				time = "18";
			} else if (comboTime.toString().equals("18:00 - 19:00")) {
				time = "19";
			} else if (comboTime.toString().equals("19:00 - 20:00")) {
				time = "20";
			} else if (comboTime.toString().equals("20:00 - 21:00")) {
				time = "21";
			} else if (comboTime.toString().equals("21:00 - 22:00")) {
				time = "22";
			} else if (comboTime.toString().equals("22:00 - 23:00")) {
				time = "23";
			} else if (comboTime.toString().equals("23:00 - 00:00")) {
				time = "24";
			}
			String row = comboSeason.toString() + "," + workingday + ","
					+ weather + "," + textTemp.toString() + ","
					+ textHumidity.toString() + "," + textWindspeed.toString()
					+ "," + holiday + "," + time + "," + "NaN" + "\n";

			cvsWriter1.append(row);
			cvsWriter1.close();

		} catch (IOException e) {
			e.printStackTrace();
		}

	}
}
